// Automatically generated by flapigen
package org.iota.client;

/**
 * The MQTT broker options.
 */
public final class BrokerOptions {

    public BrokerOptions() {
        mNativeObj = init();
    }
    private static native long init();
    /**
     * Whether the MQTT broker should be automatically disconnected when all topics are unsubscribed or not.
     * @param disconnect
     */
    public final BrokerOptions automaticDisconnect(boolean disconnect) {
        long ret = do_automaticDisconnect(mNativeObj, disconnect);
        BrokerOptions convRet = new BrokerOptions(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_automaticDisconnect(long self, boolean disconnect);
    /**
     * timeout of the mqtt broker.
     * @param timeout The timeout in seconds
     */
    public final BrokerOptions timeout(float timeout) {
        long ret = do_timeout(mNativeObj, timeout);
        BrokerOptions convRet = new BrokerOptions(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_timeout(long self, float timeout);
    /**
     * Defines if websockets should be used (true) or TCP (false)
     * @param use_ws If we use web sockets or not
     */
    public final BrokerOptions useWs(boolean use_ws) {
        long ret = do_useWs(mNativeObj, use_ws);
        BrokerOptions convRet = new BrokerOptions(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_useWs(long self, boolean use_ws);
    /**
     * Defines the port to be used for the MQTT connection
     * @param port The port we use to conenct
     */
    public final BrokerOptions port(int port) {
        long ret = do_port(mNativeObj, port);
        BrokerOptions convRet = new BrokerOptions(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_port(long self, int port);
    /**
     * Defines the maximum reconnection attempts before it returns an error
     * @param max_reconnection_attempts The maximum attempts
     */
    public final BrokerOptions maxReconnectionAttempts(long max_reconnection_attempts) {
        long ret = do_maxReconnectionAttempts(mNativeObj, max_reconnection_attempts);
        BrokerOptions convRet = new BrokerOptions(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_maxReconnectionAttempts(long self, long max_reconnection_attempts);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ BrokerOptions(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}