// Automatically generated by flapigen
package org.iota.client;


public final class TransactionPayload {
    @Override
    public String toString() {{
        return this.to_string();
    }}


    private TransactionPayload() {}

    private final String to_string() {
        String ret = do_to_string(mNativeObj);

        return ret;
    }
    private static native String do_to_string(long self);
    /**
     * Serializes the transaction payload into a json string
     */
    public final String serialize() {
        String ret = do_serialize(mNativeObj);

        return ret;
    }
    private static native String do_serialize(long self);
    /**
     * Turns a serialized transaction payload string back into its class
     */
    public static TransactionPayload deserialize(String serialised_data) {
        long ret = do_deserialize(serialised_data);
        TransactionPayload convRet = new TransactionPayload(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_deserialize(String serialised_data);
    /**
     * Return a new `TransactionPayloadBuilder` to build a `TransactionPayload`.
     */
    public static TransactionPayloadBuilder builder() {
        long ret = do_builder();
        TransactionPayloadBuilder convRet = new TransactionPayloadBuilder(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_builder();
    /**
     * Return the essence of a `TransactionPayload`.
     */
    public final Essence essence() {
        long ret = do_essence(mNativeObj);
        Essence convRet = new Essence(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_essence(long self);
    /**
     * Computes the identifier of a `TransactionPayload`.
     */
    public final TransactionId id() {
        long ret = do_id(mNativeObj);
        TransactionId convRet = new TransactionId(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_id(long self);
    /**
     * Return unlock blocks of a `TransactionPayload`.
     */
    public final UnlockBlock [] unlockBlocks() {
        UnlockBlock [] ret = do_unlockBlocks(mNativeObj);

        return ret;
    }
    private static native UnlockBlock [] do_unlockBlocks(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ TransactionPayload(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}