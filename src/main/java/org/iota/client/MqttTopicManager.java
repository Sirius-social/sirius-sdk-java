// Automatically generated by flapigen
package org.iota.client;


public final class MqttTopicManager {

    private MqttTopicManager() {}
    /**
     * Add a new topic to the list.
     */
    public final MqttTopicManager withTopic(Topic topic) {
        long a0 = topic.mNativeObj;
        topic.mNativeObj = 0;

        long ret = do_withTopic(mNativeObj, a0);
        MqttTopicManager convRet = new MqttTopicManager(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(topic);

        return convRet;
    }
    private static native long do_withTopic(long self, long topic);
    /**
     * Add a collection of topics to the list.
     */
    public final MqttTopicManager withTopics(Topic[] topics) {
        long ret = do_withTopics(mNativeObj, topics);
        MqttTopicManager convRet = new MqttTopicManager(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_withTopics(long self, Topic[] topics);
    /**
     * Unsubscribe from the given topics.
     * If no topics were provided, the function will unsubscribe from every subscribed topic.
     */
    public final void unsubscribe() {
        do_unsubscribe(mNativeObj);
    }
    private static native void do_unsubscribe(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ MqttTopicManager(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}