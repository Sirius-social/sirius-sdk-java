// Automatically generated by flapigen
package org.iota.client;

/**
 * Response of an address balance request
 */
public final class BalanceAddressResponse {
    @Override
    public String toString() {{
        return this.to_string();
    }}

    public boolean equals(Object obj) {
        boolean equal = false;
        if (obj instanceof BalanceAddressResponse)
        equal = ((BalanceAddressResponse)obj).rustEq(this);
        return equal;
    }

    public int hashCode() {
        return (int)mNativeObj;
    }


    private BalanceAddressResponse() {}

    private final String to_string() {
        String ret = do_to_string(mNativeObj);

        return ret;
    }
    private static native String do_to_string(long self);

    private final boolean rustEq(BalanceAddressResponse o) {
        long a0 = o.mNativeObj;
        boolean ret = do_rustEq(mNativeObj, a0);

        JNIReachabilityFence.reachabilityFence1(o);

        return ret;
    }
    private static native boolean do_rustEq(long self, long o);
    /**
     * The type of address
     */
    public final short addressType() {
        short ret = do_addressType(mNativeObj);

        return ret;
    }
    private static native short do_addressType(long self);
    /**
     * The address
     */
    public final String address() {
        String ret = do_address(mNativeObj);

        return ret;
    }
    private static native String do_address(long self);
    /**
     * The balance of this address
     */
    public final long balance() {
        long ret = do_balance(mNativeObj);

        return ret;
    }
    private static native long do_balance(long self);
    /**
     * Wether or not this address allows dust
     */
    public final boolean dustAllowed() {
        boolean ret = do_dustAllowed(mNativeObj);

        return ret;
    }
    private static native boolean do_dustAllowed(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ BalanceAddressResponse(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}